/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package logparser;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.String;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Calendar;
/**
 *
 * @author cortlim
 */
public class ReadLog extends javax.swing.JFrame {

    /** Creates new form ReadLog */
    public ReadLog() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Filename = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        StartButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Filename.setText("C:\\Users\\Ms JAY\\Desktop\\Student Data (aplusix)\\Reggy\\D-2011-02-28\\A-15-37-22-Entrainement");
        Filename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilenameActionPerformed(evt);
            }
        });

        jLabel1.setText("File Path:");

        StartButton.setText("Get Log");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Filename, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(StartButton)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(StartButton))
                .addContainerGap(250, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FilenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilenameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FilenameActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        Filename.setText(Filename.getText()+"/");
        File folder = new File(Filename.getText());
        File[] listOfFiles = folder.listFiles();
        try {
            // Create file for header
            FileWriter fstream = new FileWriter(Filename.getText() + "Context.csv",true);
                BufferedWriter out = new BufferedWriter(fstream);
            out.write("TIMESTAMP,CONTEXT");
            out.newLine();
            //Close the output stream
            out.close();
            }catch (Exception e){//Catch exception if any
              System.err.println("Error: " + e.getMessage());
            }
        for (int i = 0; i < listOfFiles.length; i++) {
        if (listOfFiles[i].isFile() && listOfFiles[i].getName().contains(".alg")) {
        BufferedReader bufRdr = null;
        try {
            //String header = "C:/Users/Ms JAY/Desktop/Student Data (aplusix)/Reggy/D-2011-02-28/A-15-37-22-Entrainement/";
            String filename = Filename.getText() + listOfFiles[i].getName();
            File file = new File(filename);
            bufRdr = new BufferedReader(new FileReader(file));
            String line = null;
            String sample = null;
            TimeConverter time = new TimeConverter("00:00:00");
            double duration = 0.0;
            boolean startParse = false;
            boolean startSession = false;
            int col = 0;
            try {
                //read each line of text file
                while ((line = bufRdr.readLine()) != null) {
                    if(startParse)
                    {
                        StringTokenizer st = new StringTokenizer(line, ";");
                        col = 0;
                        while (st.hasMoreTokens()) {
                            //get next token and store it in the array
                            sample = st.nextToken();
                            System.out.println(sample + " " + col);
                            if(col == 1) //gets the time from the log and adds it to the base time of TimeConverter
                            {
                                duration = Double.parseDouble(sample);
                                if (duration != 0.0)
                                    startSession = true;
                                if (duration > 2.0)
                                {
                                    time.addTime(2.0);
                                    try {
                                    // Create file
                                    FileWriter fstream = new FileWriter(Filename.getText() + "Context.csv",true);
                                        BufferedWriter out = new BufferedWriter(fstream);
                                    out.write(time.getTime()+",");
                                    System.out.println(time.getTime());
                                    out.write("Thinking");
                                    out.newLine();
                                    //Close the output stream
                                    out.close();
                                    }catch (Exception e){//Catch exception if any
                                      System.err.println("Error: " + e.getMessage());
                                    }
                                    duration = duration - 2.0;
                                }
                                //time
                            }
                            if(col == 2) //gets the context from the logs whether it be reading, thinking, hinting and mistake
                            {
                                if (!startSession)
                                    System.out.println("loading aplusix");
                                else if(!sample.equals("()"))
                                {
                                    try {
                                    // Create file
                                    FileWriter fstream = new FileWriter(Filename.getText() + "Context.csv",true);
                                        BufferedWriter out = new BufferedWriter(fstream);
                                    out.write(time.addTime(duration)+",");
                                    if (sample.contains("Demand") || sample.contains("commentairetransition"))
                                        out.write("Hinting");
                                    else
                                        out.write("Answering");
                                    out.newLine();
                                    //Close the output stream
                                    out.close();
                                    }catch (Exception e){//Catch exception if any
                                      System.err.println("Error: " + e.getMessage());
                                    }
                                }
                            }
                            if(col == 3) //supposed to log the context error from the log
                            {
                                if (!sample.equals("()"))
                                {
                                    try {
                                    // Create file
                                    FileWriter fstream = new FileWriter(Filename.getText() + "Context.csv",true);
                                        BufferedWriter out = new BufferedWriter(fstream);
                                    out.write(time.getTime()+",");
                                    out.write("Committed a Mistake");
                                    out.newLine();
                                    //Close the output stream
                                    out.close();
                                    }catch (Exception e){//Catch exception if any
                                      System.err.println("Error: " + e.getMessage());
                                    }
                                }

                            }
                            /*if(col == 10)
                            {
                                try {
                                    // Create file
                                    FileWriter fstream = new FileWriter("C:/Documents and Settings/cortlim/Desktop/A-12-19-33-Entrainement/Result.txt",true);
                                        BufferedWriter out = new BufferedWriter(fstream);
                                    out.newLine();
                                    //Close the output stream
                                    out.close();
                                    }catch (Exception e){//Catch exception if any
                                      System.err.println("Error: " + e.getMessage());
                                    }
                            }*/
                            col++;
                        }
                    }
                    if(line.contains("%;ACTIONS"))
                    {
                        //this part initializes the TimeConverter class with the time from the log
                        startParse = true;
                        StringTokenizer st = new StringTokenizer(line, ";");
                        col = 0;
                        while (st.hasMoreTokens()) {
                            //get next token and store it in the array
                            sample = st.nextToken();
                            System.out.println(sample + " " + col);
                            col++;
                            String timestamp;
                            if (col == 3)
                            {
                                try{
                                    // Create file
                                    FileWriter fstream = new FileWriter(Filename.getText() + "Context.csv",true);
                                        BufferedWriter out = new BufferedWriter(fstream);
                                        timestamp = (String) sample.subSequence(22, 30);
                                        time = new TimeConverter(timestamp);
                                    out.write(time.getTime() + ",Thinking");
                                    out.newLine();
                                    //Close the output stream
                                    out.close();
                                    }catch (Exception e){//Catch exception if any
                                      System.err.println("Error: " + e.getMessage());
                                    }
                            }//if
                        }//while
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ReadLog.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {

                //close the file
                bufRdr.close();
            } catch (IOException ex) {
                Logger.getLogger(ReadLog.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ReadLog.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bufRdr.close();
            } catch (IOException ex) {
                Logger.getLogger(ReadLog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }//end if file
        }//end for loop of files
        System.exit(0);
        
    }//GEN-LAST:event_StartButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReadLog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Filename;
    private javax.swing.JButton StartButton;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

}
